# ============================================================================
# STANDALONE BOT MODE (Original functionality - backward compatible)
# ============================================================================
# These settings are used when running: python main.py (without BOT_ID set)

# Phemex API Credentials
# Get these from: https://phemex.com/account/api-management (mainnet)
# or https://testnet.phemex.com/account/api-management (testnet)
API_KEY=your_phemex_api_key_here
API_SECRET=your_phemex_api_secret_here

# Trading Configuration
# Format: SYMBOL:SIDE:AUTO_MODE
# - SYMBOL: Trading pair (e.g., BTCUSDT, ETHUSDT)
# - SIDE: Long or Short
# - AUTO_MODE: True (auto-opens positions) or False (manual)
# Multiple symbols: separate with commas
# Examples:
#   BTCUSDT:Long:True
#   ETHUSDT:Short:False
#   BTCUSDT:Long:True,ETHUSDT:Short:True
SYMBOL=BTCUSDT:Long:True

# EMA interval in minutes (1, 5, 15, 30, 60, etc.)
EMA_INTERVAL=1

# Use Phemex testnet (True) or mainnet (False)
# ALWAYS start with True for testing!
TESTNET=True

# Optional: Telegram Notifications
# See docs/TELEGRAM_SETUP.md for setup instructions
# Leave empty to disable notifications
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# Optional: Bot Startup Notification
# Set to True to send "Bot Started" notification (useful for manual restarts)
# Set to False for cron jobs to avoid notification spam
# Default: False
BOT_STARTUP=False

# Optional: PostOnly Orders (Fee Optimization)
# Set to True to use PostOnly for entry orders (ensures maker fees: 0.075%)
# Set to False to use GoodTillCancel for all orders (may incur taker fees: 0.15%)
# Exit orders always use GoodTillCancel for fast execution
# Default: True
USE_POSTONLY=True


# ============================================================================
# SAAS MODE (New multi-user functionality)
# ============================================================================
# These settings are used when running the web application or with BOT_ID set
# Leave empty if you're only using standalone mode

# Database - Digital Ocean Managed PostgreSQL
# Format: postgresql://user:password@host:port/database?sslmode=require
# Your managed database details:
#   host: private-dbaas-db-10215807-do-user-15659652-0.e.db.ondigitalocean.com
#   port: 25060
#   database: diptrader
#   user: diptrader
DATABASE_URL=postgresql://diptrader:PASSWORD_HERE@private-dbaas-db-10215807-do-user-15659652-0.e.db.ondigitalocean.com:25060/diptrader?sslmode=require

# Flask Application Settings
# Generate SECRET_KEY with: python -c "import os; print(os.urandom(32).hex())"
SECRET_KEY=generate_with_openssl_rand_hex_32
FLASK_ENV=development
DEBUG=True

# Security - API Key Encryption
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# IMPORTANT: Keep this key secret and back it up! Lost key = can't decrypt API keys
ENCRYPTION_KEY=your_fernet_encryption_key_here

# Bot Execution Mode
# Leave empty for standalone mode (.env file config)
# Set to a bot ID (number) to run specific bot from database (SaaS mode)
# Example: BOT_ID=1
BOT_ID=
